using CsvHelper.Configuration;

namespace NationBuilderConnect.Client.Tools.Export
{
    internal sealed class ExportedPersonMap : CsvClassMap<ExportedPerson>
    {
        public ExportedPersonMap()
        {
            Map(m => m.ActiveCustomerExpiresAt).Name("active_customer_expires_at");
            Map(m => m.ActiveCustomerStartedAt).Name("active_customer_started_at");
            Map(m => m.AddressAddress1).Name("address_address1");
            Map(m => m.AddressAddress2).Name("address_address2");
            Map(m => m.AddressAddress3).Name("address_address3");
            Map(m => m.AddressCity).Name("address_city");
            Map(m => m.AddressCountry).Name("address_country");
            Map(m => m.AddressCountryCode).Name("address_country_code");
            Map(m => m.AddressCounty).Name("address_county");
            Map(m => m.AddressFips).Name("address_fips");
            Map(m => m.AddressGeocodeAccuracy).Name("address_geocode_accuracy");
            Map(m => m.AddressState).Name("address_state");
            Map(m => m.AddressSubmittedAddress).Name("address_submitted_address");
            Map(m => m.AddressZip).Name("address_zip");
            Map(m => m.Availability).Name("availability");
            Map(m => m.BornAt).Name("born_at");
            Map(m => m.CapitalAmount).Name("capital_amount");
            Map(m => m.CapitalAmountInCents).Name("capital_amount_in_cents");
            Map(m => m.Church).Name("church");
            Map(m => m.CityDistrict).Name("city_district");
            Map(m => m.CitySubDistrict).Name("city_sub_district");
            Map(m => m.CiviCrmId).Name("civicrm_id");
            Map(m => m.ClosedInvoicesAmount).Name("closed_invoices_amount");
            Map(m => m.ClosedInvoicesAmountInCents).Name("closed_invoices_amount_in_cents");
            Map(m => m.ClosedInvoicesCount).Name("closed_invoices_count");
            Map(m => m.CountyDistrict).Name("county_district");
            Map(m => m.CountyFileId).Name("county_file_id");
            Map(m => m.CreatedAt).Name("created_at");
            Map(m => m.DataTrustId).Name("datatrust_id");
            Map(m => m.Demographic).Name("demo");
            Map(m => m.DoNotCall).Name("do_not_call");
            Map(m => m.DoNotContact).Name("do_not_contact");
            Map(m => m.DonationsAmount).Name("donations_amount");
            Map(m => m.DonationsAmountInCents).Name("donations_amount_in_cents");
            Map(m => m.DonationsAmountThisCycle).Name("donations_amount_this_cycle");
            Map(m => m.DonationsAmountThisCycleInCents).Name("donations_amount_this_cycle_in_cents");
            Map(m => m.DonationsCount).Name("donations_count");
            Map(m => m.DonationsCountThisCycle).Name("donations_count_this_cycle");
            Map(m => m.DonationsPledgedAmountIn).Name("donations_pledged_amount");
            Map(m => m.DonationsPledgedAmountInCents).Name("donations_pledged_amount_in_cents");
            Map(m => m.DonationsRaisedAmount).Name("donations_raised_amount");
            Map(m => m.DonationsRaisedAmountInCents).Name("donations_raised_amount_in_cents");
            Map(m => m.DonationsRaisedAmountThisCycle).Name("donations_raised_amount_this_cycle");
            Map(m => m.DonationsRaisedAmountThisCycleInCents).Name("donations_raised_amount_this_cycle_in_cents");
            Map(m => m.DonationsRaisedCount).Name("donations_raised_count");
            Map(m => m.DonationsRaisedCountThisCycle).Name("donations_raised_count_this_cycle");
            Map(m => m.CatalistId).Name("dw_id");
            Map(m => m.Email).Name("email");
            Map(m => m.EmailOptIn).Name("email_opt_in");
            Map(m => m.Email1).Name("email1");
            Map(m => m.Email1IsBad).Name("email1_is_bad");
            Map(m => m.Email2).Name("email2");
            Map(m => m.Email2IsBad).Name("email2_is_bad");
            Map(m => m.Email3).Name("email3");
            Map(m => m.Email3IsBad).Name("email3_is_bad");
            Map(m => m.Email4).Name("email4");
            Map(m => m.Email4IsBad).Name("email4_is_bad");
            Map(m => m.Employer).Name("employer");
            Map(m => m.Ethnicity).Name("ethnicity");
            Map(m => m.ExternalId).Name("external_id");
            Map(m => m.FacebookAddress).Name("facebook_username");
            Map(m => m.FaxNumber).Name("fax_number");
            Map(m => m.FederalDistrict).Name("federal_district");
            Map(m => m.FederalDoNotCall).Name("federal_donotcall");
            Map(m => m.FireDistrict).Name("fire_district");
            Map(m => m.FirstDonatedAt).Name("first_donated_at");
            Map(m => m.FirstInvoiceAt).Name("first_invoice_at");
            Map(m => m.FirstName).Name("first_name");
            Map(m => m.FullName).Name("full_name");
            Map(m => m.InferredParty).Name("inferred_party");
            Map(m => m.InferredSupportLevel).Name("inferred_support_level");
            Map(m => m.InvoicePaymentsAmount).Name("invoice_payments_amount");
            Map(m => m.InvoicePaymentsAmountInCents).Name("invoice_payments_amount_in_cents");
            Map(m => m.InvoicePaymentsReferredAmountInCents).Name("invoice_payments_referred_amount_in_cents");
            Map(m => m.InvoicesAmount).Name("invoices_amount");
            Map(m => m.InvoicesAmountInCents).Name("invoices_amount_in_cents");
            Map(m => m.InvoicesCount).Name("invoices_count");
            Map(m => m.IsCustomer).Name("is_customer");
            Map(m => m.IsDeceased).Name("is_deceased");
            Map(m => m.IsDonor).Name("is_donor");
            Map(m => m.IsFundraiser).Name("is_fundraiser");
            Map(m => m.IsIgnoreDonationLimits).Name("is_ignore_donation_limits");
            Map(m => m.IsMobileBad).Name("is_mobile_bad");
            Map(m => m.IsProspect).Name("is_prospect");
            Map(m => m.IsSupporter).Name("is_supporter");
            Map(m => m.IsVolunteer).Name("is_volunteer");
            Map(m => m.JudicialDistrict).Name("judicial_district");
            Map(m => m.Language).Name("language");
            Map(m => m.LastDonatedAt).Name("last_donated_at");
            Map(m => m.LastInvoiceAt).Name("last_invoice_at");
            Map(m => m.LastName).Name("last_name");
            Map(m => m.LegalName).Name("legal_name");
            Map(m => m.MailingAddress1).Name("mailing_address1");
            Map(m => m.MailingAddress2).Name("mailing_address2");
            Map(m => m.MailingAddress3).Name("mailing_address3");
            Map(m => m.MailingCarrierRoute).Name("mailing_carrier_route");
            Map(m => m.MailingCity).Name("mailing_city");
            Map(m => m.MailingCountry).Name("mailing_country");
            Map(m => m.MailingCountryCode).Name("mailing_country_code");
            Map(m => m.MailingCounty).Name("mailing_county");
            Map(m => m.MailingDeliveryPoint).Name("mailing_delivery_point");
            Map(m => m.MailingFips).Name("mailing_fips");
            Map(m => m.MailingGeocodeAccuracy).Name("mailing_geocode_accuracy");
            Map(m => m.MailingLot).Name("mailing_lot");
            Map(m => m.MailingSortSequence).Name("mailing_sort_sequence");
            Map(m => m.MailingState).Name("mailing_state");
            Map(m => m.MailingStreetName).Name("mailing_street_name");
            Map(m => m.MailingStreetNumber).Name("mailing_street_number");
            Map(m => m.MailingStreetPrefix).Name("mailing_street_prefix");
            Map(m => m.MailingStreetSuffix).Name("mailing_street_suffix");
            Map(m => m.MailingStreetType).Name("mailing_street_type");
            Map(m => m.MailingSubmittedAddress).Name("mailing_submitted_address");
            Map(m => m.MailingUnitNumber).Name("mailing_unit_number");
            Map(m => m.MailingZip).Name("mailing_zip");
            Map(m => m.MailingZip4).Name("mailing_zip4");
            Map(m => m.MailingZip5).Name("mailing_zip5");
            Map(m => m.MaritalStatus).Name("marital_status");
            Map(m => m.MaximumDonationPossibleThisCycle).Name("maximum_donation_possible_this_cycle");
            Map(m => m.MaximumDonationPossibleThisCycleInCents).Name("maximum_donation_possible_this_cycle_in_cents");
            Map(m => m.MediaMarketName).Name("media_market_name");
            Map(m => m.MeetupAddress).Name("meetup_id");
            Map(m => m.MembershipNames).Name("membership_names");
            Map(m => m.MiddleName).Name("middle_name");
            Map(m => m.MobileNumber).Name("mobile_number");
            Map(m => m.MobileOptIn).Name("mobile_opt_in");
            Map(m => m.Id).Name("nationbuilder_id");
            Map(m => m.NbElectionCenterGuid).Name("nbec_guid");
            Map(m => m.NgpId).Name("ngp_id");
            Map(m => m.Note).Name("note");
            Map(m => m.Occupation).Name("occupation");
            Map(m => m.OutstandingInvoicesAmount).Name("outstanding_invoices_amount");
            Map(m => m.OutstandingInvoicesAmountInCents).Name("outstanding_invoices_amount_in_cents");
            Map(m => m.OutstandingInvoicesCount).Name("outstanding_invoices_count");
            Map(m => m.ParentId).Name("parent_id");
            Map(m => m.Party).Name("party");
            Map(m => m.PartyMember).Name("party_member");
            Map(m => m.PoliticalForceId).Name("pf_strat_id");
            Map(m => m.PhoneNumber).Name("phone_number");
            Map(m => m.PointPersonNameOrEmail).Name("point_person_name_or_email");
            Map(m => m.PrecinctCode).Name("precinct_code");
            Map(m => m.PrecinctName).Name("precinct_name");
            Map(m => m.Prefix).Name("prefix");
            Map(m => m.PreviousParty).Name("previous_party");
            Map(m => m.PrimaryAddressAddress1).Name("primary_address1");
            Map(m => m.PrimaryAddressAddress2).Name("primary_address2");
            Map(m => m.PrimaryAddressAddress3).Name("primary_address3");
            Map(m => m.PrimaryAddressCity).Name("primary_city");
            Map(m => m.PrimaryAddressCountry).Name("primary_country");
            Map(m => m.PrimaryAddressCountry_code).Name("primary_country_code");
            Map(m => m.PrimaryAddressCounty).Name("primary_county");
            Map(m => m.PrimaryAddressFips).Name("primary_fips");
            Map(m => m.PrimaryAddressGeocodeAccuracy).Name("primary_geocode_accuracy");
            Map(m => m.PrimaryAddressState).Name("primary_state");
            Map(m => m.PrimaryAddressSubmittedAddress).Name("primary_submitted_address");
            Map(m => m.PrimaryAddressZip).Name("primary_zip");
            Map(m => m.PriorityLevel).Name("priority_level");
            Map(m => m.ReceivedCapitalAmount).Name("received_capital_amount");
            Map(m => m.ReceivedCapitalAmountInCents).Name("received_capital_amount_in_cents");
            Map(m => m.RecruiterId).Name("recruiter_id");
            Map(m => m.RecruiterNameOrEmail).Name("recruiter_name_or_email");
            Map(m => m.RegisteredAddressAddress1).Name("registered_address1");
            Map(m => m.RegisteredAddressAddress2).Name("registered_address2");
            Map(m => m.RegisteredAddressAddress3).Name("registered_address3");
            Map(m => m.RegisteredAddressCarrierRoute).Name("registered_carrier_route");
            Map(m => m.RegisteredAddressCity).Name("registered_city");
            Map(m => m.RegisteredAddressCountry).Name("registered_country");
            Map(m => m.RegisteredAddressCountry_code).Name("registered_country_code");
            Map(m => m.RegisteredAddressCounty).Name("registered_county");
            Map(m => m.RegisteredAddressDeliveryPoint).Name("registered_delivery_point");
            Map(m => m.RegisteredAddressFips).Name("registered_fips");
            Map(m => m.RegisteredAddressGeocodeAccuracy).Name("registered_geocode_accuracy");
            Map(m => m.RegisteredAddressLot).Name("registered_lot");
            Map(m => m.RegisteredAddressSortSequence).Name("registered_sort_sequence");
            Map(m => m.RegisteredAddressState).Name("registered_state");
            Map(m => m.RegisteredAddressStreetName).Name("registered_street_name");
            Map(m => m.RegisteredAddressStreetNumber).Name("registered_street_number");
            Map(m => m.RegisteredAddressStreetPrefix).Name("registered_street_prefix");
            Map(m => m.RegisteredAddressStreetSuffix).Name("registered_street_suffix");
            Map(m => m.RegisteredAddressStreetType).Name("registered_street_type");
            Map(m => m.RegisteredAddressSubmittedAddress).Name("registered_submitted_address");
            Map(m => m.RegisteredAddressUnitNumber).Name("registered_unit_number");
            Map(m => m.RegisteredAddressZip).Name("registered_zip");
            Map(m => m.RegisteredAddressZip4).Name("registered_zip4");
            Map(m => m.RegisteredAddressZip5).Name("registered_zip5");
            Map(m => m.Religion).Name("religion");
            Map(m => m.RncId).Name("rnc_id");
            Map(m => m.RncRegistractionId).Name("rnc_regid");
            Map(m => m.SalesforceId).Name("salesforce_id");
            Map(m => m.SchoolDistrict).Name("school_district");
            Map(m => m.SchoolSubDistrict).Name("school_sub_district");
            Map(m => m.Sex).Name("sex");
            Map(m => m.SignupType).Name("signup_type");
            Map(m => m.SpentCapitalAmount).Name("spent_capital_amount");
            Map(m => m.SpentCapitalAmountInCents).Name("spent_capital_amount_in_cents");
            Map(m => m.StateFileId).Name("state_file_id");
            Map(m => m.StateLowerDistrict).Name("state_lower_district");
            Map(m => m.StateUpperDistrict).Name("state_upper_district");
            Map(m => m.NameSuffix).Name("suffix");
            Map(m => m.SupportLevel).Name("support_level");
            Map(m => m.SupportProbabilityScore).Name("support_probability_score");
            Map(m => m.SupranationalDistrict).Name("supranational_district");
            Map(m => m.TagList).Name("tag_list");
            Map(m => m.TurnoutProbabilityScore).Name("turnout_probability_score");
            Map(m => m.TwitterId).Name("twitter_id");
            Map(m => m.TwitterLogin).Name("twitter_login");
            Map(m => m.UnsubscribedFromEmailsAt).Name("unsubscribed_at");
            Map(m => m.UserSubmittedAddressAddress1).Name("user_submitted_address1");
            Map(m => m.UserSubmittedAddressAddress2).Name("user_submitted_address2");
            Map(m => m.UserSubmittedAddressAddress3).Name("user_submitted_address3");
            Map(m => m.UserSubmittedAddressCity).Name("user_submitted_city");
            Map(m => m.UserSubmittedAddressCountry).Name("user_submitted_country");
            Map(m => m.UserSubmittedAddressCountry_code).Name("user_submitted_country_code");
            Map(m => m.UserSubmittedAddressCounty).Name("user_submitted_county");
            Map(m => m.UserSubmittedAddressFips).Name("user_submitted_fips");
            Map(m => m.UserSubmittedAddressGeocodeAccuracy).Name("user_submitted_geocode_accuracy");
            Map(m => m.UserSubmittedAddressState).Name("user_submitted_state");
            Map(m => m.UserSubmittedAddressSubmittedAddress).Name("user_submitted_submitted_address");
            Map(m => m.UserSubmittedAddressZip).Name("user_submitted_zip");
            Map(m => m.VanId).Name("van_id");
            Map(m => m.VillageDistrict).Name("village_district");
            Map(m => m.Website).Name("website");
            Map(m => m.WorkAddressAddress1).Name("work_address1");
            Map(m => m.WorkAddressAddress2).Name("work_address2");
            Map(m => m.WorkAddressAddress3).Name("work_address3");
            Map(m => m.WorkAddressCity).Name("work_city");
            Map(m => m.WorkAddressCountry).Name("work_country");
            Map(m => m.WorkAddressCountry_code).Name("work_country_code");
            Map(m => m.WorkAddressCounty).Name("work_county");
            Map(m => m.WorkAddressFips).Name("work_fips");
            Map(m => m.WorkAddressGeocodeAccuracy).Name("work_geocode_accuracy");
            Map(m => m.WorkPhoneNumber).Name("work_phone_number");
            Map(m => m.WorkAddressState).Name("work_state");
            Map(m => m.WorkAddressSubmittedAddress).Name("work_submitted_address");
            Map(m => m.WorkAddressZip).Name("work_zip");


        }
    }
}